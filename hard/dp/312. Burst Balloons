
Given n balloons, indexed from 0 to n-1. Each balloon is painted with a number on it represented by array nums. You are asked to burst all the balloons. If the you burst balloon i you will get nums[left] * nums[i] * nums[right] coins. Here left and right are adjacent indices of i. After the burst, the left and right then becomes adjacent.

Find the maximum coins you can collect by bursting the balloons wisely.

Note:

You may imagine nums[-1] = nums[n] = 1. They are not real therefore you can not burst them.
0 ≤ n ≤ 500, 0 ≤ nums[i] ≤ 100
Example:

Input: [3,1,5,8]
Output: 167 
Explanation: nums = [3,1,5,8] --> [3,5,8] -->   [3,8]   -->  [8]  --> []
             coins =  3*1*5      +  3*5*8    +  1*3*8      + 1*8*1   = 16

/*
  这道题目的关键在于
  1. 理解分割点k，k是当前整体的最后一个去除点
  2. 将left和right设置为不参与排除的点
*/


class Solution {
private:
    using LL = long long;
    LL dp[501][501];
public:
    int maxCoins(vector<int>& nums) {
        vector<int> nnums;
        nnums.push_back(1);
        for(auto x:nums){nnums.push_back(x);}
        nnums.push_back(1);
        memset(dp, 0, sizeof(dp)); 
        int n = nnums.size();
        return dpA(0, n-1, nnums);
    }
    
    LL dpA(int left, int right, vector<int> & nums){
        if(dp[left][right] != 0) return dp[left][right];
        LL res = 0;
        for(int i = left + 1; i < right; i++){
            LL cacu = dpA(left, i, nums) + dpA(i, right, nums) + nums[left] * nums[i] * nums[right];
            res = max(res, cacu);            
        }
        dp[left][right] = res;
        return res;
    }
};
