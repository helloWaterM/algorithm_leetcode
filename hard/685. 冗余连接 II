685. 冗余连接 II
题目描述提示帮助提交记录社区讨论阅读解答
随机一题
在本问题中，有根树指满足以下条件的有向图。该树只有一个根节点，所有其他节点都是该根节点的后继。每一个节点只有一个父节点，除了根节点没有父节点。

输入一个有向图，该图由一个有着N个节点 (节点值不重复1, 2, ..., N) 的树及一条附加的边构成。附加的边的两个顶点包含在1到N中间，这条附加的边不属于树中已存在的边。

结果图是一个以边组成的二维数组。 每一个边 的元素是一对 [u, v]，用以表示有向图中连接顶点 u and v和顶点的边，其中父节点u是子节点v的一个父节点。

返回一条能删除的边，使得剩下的图是有N个节点的有根树。若有多个答案，返回最后出现在给定二维数组的答案。

示例 1:

输入: [[1,2], [1,3], [2,3]]
输出: [2,3]
解释: 给定的有向图如下:
  1
 / \
v   v
2-->3
示例 2:

输入: [[1,2], [2,3], [3,4], [4,1], [1,5]]
输出: [4,1]
解释: 给定的有向图如下:
5 <- 1 -> 2
     ^    |
     |    v
     4 <- 3
注意:

二维数组大小的在3到1000范围内。
二维数组中的每个整数在1到N之间，其中 N 是二维数组的大小。





class Solution {
private:
public:
    vector<int> findRedundantDirectedConnection(vector<vector<int>>& edges) {
        unordered_map<int, int> color(1001);
        vector<vector<int>> G(1001);
        
        int n = edges.size(); int r=-1;
        
        unordered_map<int, int> M; for(int i = 1; i <= n; i++){color[i] = 0; M[i] = 0;} M[0] = 1;
        
        for(int i = 0; i < n; i++){
            int u = edges[i][0]; int v = edges[i][1]; M[v] = 1;           
            G[u].push_back(v);
        }
        for(unordered_map<int, int>::iterator it = M.begin(); it != M.end(); it++){
            cout << it->first <<" " <<it->second<<endl;
            if(it->second != 1){
                r = it->first;
            }    
        }
        cout <<"r"<<r<<endl;
        if (r == -1){ // has oriented circle
            for(int s = 1; s <= n; s++){
                color[s] = 1;
                dfs_1(s, color, G);
            }
            for(int i = n - 1; i >= 0 ; i--){
                int u = edges[i][0]; int v = edges[i][1];
                if(color[u] == 1 && color[v] == 1){
                    vector<int> res;
                    res.push_back(u); res.push_back(v);
                    return res;
                }
            }
        }
        else{   //has root
            color[r] = 1;
            int node = dfs_2(r, color, G);
            cout <<"node" << node <<endl;
            int tag = 0;
            for(int i = 0; i < n; i++){
                int u = edges[i][0]; int v = edges[i][1];
                cout <<"u" <<u<<"v" <<v<<endl;
                if( v == node ){
                    vector<int> res;
                    res.push_back(u); res.push_back(v); tag++;
                    if(isChild(v,u, color, G)){
                        return res;
                    }
                    else if (tag == 2){
                        return res;
                    }
                    else{
                        continue;
                    }
                }  
            
            }
        }    
    }
    
    int dfs_1(int father, unordered_map<int, int>& color, vector<vector<int>>& G){
        for(int i = 0; i < G[father].size(); i++){
            if(color[G[father][i]] == 0) {
                color[G[father][i]] = 1;
            }
            else if(color[G[father][i]] == 1) {
                return G[father][i];
            }
            else{;}
            int res = dfs_1(G[father][i], color, G);
            if(res == -1) continue;
            else{return res;}
        }
        color[father] = 0;
        return -1;
    }
    
    int dfs_2(int father, unordered_map<int, int>& color, vector<vector<int>>& G){
        cout << "father" <<father<<endl;
        cout <<G[father].size()<<endl;
        for(int i = 0; i < G[father].size(); i++){
            if(color[G[father][i]] == 0) {
                cout <<"zero:" << G[father][i] <<endl;
                color[G[father][i]] = 1;
            }
            else if(color[G[father][i]] == 1) {
                cout <<"one:"<< G[father][i] <<endl;
                return G[father][i];
            }
            else{
                ;
            }
            int res = dfs_2(G[father][i], color, G);
            if(res == -1) continue;
            else {return res;}
        }
        return -1;
    }
    
    
    bool isChild(int father, int son, unordered_map<int, int>& color, vector<vector<int>>& G ){
        color[father] = 3;
        cout  <<"father" <<father<<endl;
        for(int i = 0; i < G[father].size(); i++){
            if(color[G[father][i]] == 3) continue;
            if(G[father][i] == son) return true;
            bool res = isChild(G[father][i], son, color, G);
            if (res == false) continue;
            else return true;
        }
        color[father] = 0;
        return false;
    }
    
};
