Given a 32-bit signed integer, reverse digits of an integer.
Example 1:
Input: 123
Output: 321
Example 2:
Input: -123
Output: -321
Example 3:
Input: 120
Output: 21
Note:
Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [−2^31,  2^31 − 1]. For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.


class Solution {
public:
    int reverse(int x) {
        int symbol = 1;
        if(x < 0 ){
            if( x == -1 << 32){return -1;}
            else{
                x = -x;
                symbol = -1;
            }
        }
        int tail; int ans = 0;
        while(x != 0 ){
            tail = x % 10; x /= 10;
            if((INT_MAX - tail) / 10.0 < ans){
                return 0;
            }
            ans = ans * 10 + tail;
            
        }
            return symbol * ans;
    }
};
