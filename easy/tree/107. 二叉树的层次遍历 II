给定一个二叉树，返回其节点值自底向上的层次遍历。 （即按从叶子节点所在层到根节点所在的层，逐层从左向右遍历）

例如：
给定二叉树 [3,9,20,null,null,15,7],

    3
   / \
  9  20
    /  \
   15   7
返回其自底向上的层次遍历为：

[
  [15,7],
  [9,20],
  [3]
]

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
private:
    vector<vector<TreeNode*>> treeLevelVec;
    
public:
    vector<vector<int>> levelOrderBottom(TreeNode* root) {
        vector<vector<int>> ans;
        if(root == NULL) return ans;
        vector<TreeNode*> level_0; 
        level_0.push_back(root); treeLevelVec.push_back(level_0);
        int j = 0;
        for(int i = 0; i < treeLevelVec.size(); i++){
            vector<TreeNode*> levelObj = treeLevelVec[i];
            for(vector<TreeNode*>::iterator nodeIt = levelObj.begin(); nodeIt != levelObj.end(); nodeIt ++){
                TreeNode* nodeObj = *nodeIt;
                if(nodeIt == levelObj.begin()){
                    vector<TreeNode*> level_empty;
                    treeLevelVec.push_back(level_empty);
                    if(nodeObj ->left != NULL) treeLevelVec[i + 1].push_back(nodeObj -> left);
                    
                    if(nodeObj -> right != NULL) treeLevelVec[i + 1].push_back(nodeObj -> right);
                    
                }
                else{
                    if(nodeObj -> left != NULL)  treeLevelVec[i + 1].push_back(nodeObj -> left);
                    if(nodeObj -> right != NULL)  treeLevelVec[i + 1].push_back(nodeObj -> right);
                    
                }
            }
        }
        for(int i = treeLevelVec.size() - 1; i >= 0; i --){
            vector<int> ans_level;
            for(int j = 0; j < treeLevelVec[i].size(); j ++){
                ans_level.push_back(treeLevelVec[i][j] -> val);
            }
            if(!ans_level.empty())
            ans.push_back(ans_level);
        }
        return ans;
    }
};
