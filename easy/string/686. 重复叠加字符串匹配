给定两个字符串 A 和 B, 寻找重复叠加字符串A的最小次数，使得字符串B成为叠加后的字符串A的子串，如果不存在则返回 -1。

举个例子，A = "abcd"，B = "cdabcdab"。

答案为 3， 因为 A 重复叠加三遍后为 “abcdabcdabcd”，此时 B 是其子串；A 重复叠加两遍后为"abcdabcd"，B 并不是其子串。

注意:

 A 与 B 字符串的长度在1和10000区间范围内。

/*
  关键点在于有最少和最多的重复次数
*/


class Solution {
public:
    int repeatedStringMatch(string A, string B) {
        int lenA = A.size(); int lenB = B.size();
        int maxTime;
        int minTime;
        minTime = (lenB + lenA -1) / lenA;  // lenB / lenA  取上届
        maxTime = (lenB - 1 + lenA -1) / lenA + 1; // (lenB-1)/ lenA 取上届
        string maxString = "";
        string minString = "";
        for(int i = 0; i < minTime; i++){
            minString += A;
        }
        for(int i = 0; i < maxTime; i++){
            maxString += A;
        }
        int di = minTime * lenA - lenB;
        int head;
        for(head = 0; head <= di; head++){
            string subString = minString.substr(head, lenB);
            if(subString == B) return minTime; 
        }
        for(head; head < lenA; head++){
            string subString = maxString.substr(head, lenB);
            if(subString == B) return maxTime;
        }
        return -1;
    }
};
