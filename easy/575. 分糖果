给定一个偶数长度的数组，其中不同的数字代表着不同种类的糖果，每一个数字代表一个糖果。你需要把这些糖果平均分给一个弟弟和一个妹妹。返回妹妹可以获得的最大糖果的种类数。

示例 1:

输入: candies = [1,1,2,2,3,3]
输出: 3
解析: 一共有三种种类的糖果，每一种都有两个。
     最优分配方案：妹妹获得[1,2,3],弟弟也获得[1,2,3]。这样使妹妹获得糖果的种类数最多。
示例 2 :

输入: candies = [1,1,2,3]
输出: 2
解析: 妹妹获得糖果[2,3],弟弟获得糖果[1,1]，妹妹有两种不同的糖果，弟弟只有一种。这样使得妹妹可以获得的糖果种类数最多。
注意:

数组的长度为[2, 10,000]，并且确定为偶数。
数组中数字的大小在范围[-100,000, 100,000]内。


/*
  一堆糖果
  妹妹可以选择一般的数量，并且种类要多，因此可以使用非常简单的贪心算法
  尽量每个选择都可以选择一个种类
  有两种可能1) 没有选完所有的种类，额度就用完了 
           2) 选完了所有的种类，额度还有
*/

class Solution {

public:
    int distributeCandies(vector<int>& candies) {
        unordered_map<int, int> M;
        for(int i = 0; i < candies.size(); i++){
            M[candies[i]]++;
        }
        if(candies.size() > M.size() * 2) return M.size();   //情况2
        else return candies.size()/2;                        //情况1
    }
};
