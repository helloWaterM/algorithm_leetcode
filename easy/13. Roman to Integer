Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.

Symbol       Value
I             1
V             5
X             10
L             50
C             100
D             500
M             1000
For example, two is written as II in Roman numeral, just two one's added together. Twelve is written as, XII, which is simply X + II. The number twenty seven is written as XXVII, which is XX + V + II.

Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:

I can be placed before V (5) and X (10) to make 4 and 9. 
X can be placed before L (50) and C (100) to make 40 and 90. 
C can be placed before D (500) and M (1000) to make 400 and 900.
Given a roman numeral, convert it to an integer. Input is guaranteed to be within the range from 1 to 3999.

Example 1:

Input: "III"
Output: 3
Example 2:

Input: "IV"
Output: 4
Example 3:

Input: "IX"
Output: 9
Example 4:

Input: "LVIII"
Output: 58
Explanation: C = 100, L = 50, XXX = 30 and III = 3.
Example 5:

Input: "MCMXCIV"
Output: 1994
Explanation: M = 1000, CM = 900, XC = 90 and IV = 4.


/*
    从规则上来看，总体上是采用加法解决
    但是对于阿拉伯数字为1（除了1000，因为最大）开头的字符，需要判定一下是否是用来加的
    从MCMXCIV可以看出 CM是合并在一起的
        因此可以推测减法的优先级别大于加法
        对于 I，X, C 只要先判断是否是减法就可以了
*/

class Solution {

private:
    map<string, int> rMi;
    void initrMi(){
        rMi.insert(pair<string, int>("I", 1));
        rMi.insert(pair<string, int>("V", 5));
        rMi.insert(pair<string, int>("X", 10));
        rMi.insert(pair<string, int>("L", 50));
        rMi.insert(pair<string, int>("C", 100));
        rMi.insert(pair<string, int>("D", 500));
        rMi.insert(pair<string, int>("M", 1000));
    }
public:
    int romanToInt(string s) {
        initrMi();
        int ans = 0;
        int sLen = s.size();
        for(int i = 0; i < sLen; i++){
            char cn = ' ';
            char c = s[i];
            if(i + 1 < sLen){
                cn = s[i + 1];
            }
            switch(c){
                case 'I':
                    if(cn =='V' || cn == 'X'){
                        ans -= 1;
                    }
                    else{
                        ans += 1;
                    }
                    break;
                case 'V':
                    ans += 5;
                    break;
                case 'X':
                    if(cn == 'L' || cn == 'C'){
                        ans -= 10;
                    }
                    else{
                        ans += 10;
                    }
                    break;
                case 'L':
                    ans += 50;
                    break;
                case 'C':
                    if(cn == 'D' || cn == 'M'){
                        ans -= 100;
                    }
                    else{
                        ans += 100;
                    }
                    break;
                case 'D':
                    ans += 500;
                    break;
                case 'M':
                    ans += 1000;
                    break;
            } 
        }
        return ans;
    }
    
};
