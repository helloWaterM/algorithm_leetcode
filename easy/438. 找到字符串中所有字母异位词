给定一个字符串 s 和一个非空字符串 p，找到 s 中所有是 p 的字母异位词的子串，返回这些子串的起始索引。
字符串只包含小写英文字母，并且字符串 s 和 p 的长度都不超过 20100。
说明：
字母异位词指字母相同，但排列不同的字符串。
不考虑答案输出的顺序。
示例 1:
输入:
s: "cbaebabacd" p: "abc"

输出:
[0, 6]

解释:
起始索引等于 0 的子串是 "cba", 它是 "abc" 的字母异位词。
起始索引等于 6 的子串是 "bac", 它是 "abc" 的字母异位词。
 示例 2:
输入:
s: "abab" p: "ab"

输出:
[0, 1, 2]

解释:
起始索引等于 0 的子串是 "ab", 它是 "ab" 的字母异位词。
起始索引等于 1 的子串是 "ba", 它是 "ab" 的字母异位词。
起始索引等于 2 的子串是 "ab", 它是 "ab" 的字母异位词。
/*
  采用滑动窗口的思想解答
*/
class Solution {
private:
    unordered_map<char, int> M;
public:
    vector<int> findAnagrams(string s, string p) {
        vector<int> ans;
        if(p.size()> s.size()) return ans;
        for(int i = 0; i < p.size(); i++){
            M[p[i]] ++;
        }
        unordered_map<char, int> M_temp = M;
        for(int j = 0; j < p.size(); j++){
            M_temp[s[j]] --;
            if(M_temp[s[j]] == 0) M_temp.erase(s[j]);
        }
        if(M_temp.begin() == M_temp.end()) ans.push_back(0);
        int pLen = p.size();
        for(int i = 1; i < s.size() - p.size() + 1; i++){
            M_temp[s[i - 1]] ++;
            if(M_temp[s[i - 1]] == 0)
                M_temp.erase(s[i - 1]);
            M_temp[s[i + pLen -1]] --;
            if(M_temp[s[i + pLen -1]] == 0)
                M_temp.erase(s[i + pLen -1]);
            if(M_temp.begin() == M_temp.end()){
                ans.push_back(i);
            }
        }
        return ans;
    }
};
