Given an integer array of size n, find all elements that appear more than ⌊ n/3 ⌋ times.

Note: The algorithm should run in linear time and in O(1) space.

Example 1:

Input: [3,2,3]
Output: [3]
Example 2:

Input: [1,1,1,3,3,2,2,2]
Output: [1,2]


class Solution {
public:
    vector<int> majorityElement(vector<int>& nums) {
        int len = nums.size();
        vector<int> ans;
        if(len == 0) return ans;
        if(len == 1) { ans.push_back(nums[0]); return ans;}
        int res1, res2;
        int count1 = 0, count2 = 0;

        for(int i = 0; i < len; i++){
            int cur = nums[i];
            if( count1 == 0){
                res1 = cur; count1 = 1;
            }
            else if( cur == res1){
                count1 ++;
            }
            else if(count2 == 0){
                res2 = cur; count2 = 1;
            }
            else if( cur == res2){
                count2 ++;
            }
            else{
                count1--; count2 --;
                if(count1 == 0  && count2 != 0){
                    count1 = count2;
                    res1 = res2;
                    count2 = 0;
                }
            }
            
        }
        if(count1 != 0){
            int count = 0;
            for(int i = 0; i < len ; i++){
                if(nums[i] == res1) count++;
            }
            if(count > len / 3) ans.push_back(res1);
        }
        if(count2 != 0){
            int count = 0;
            for(int i = 0; i < len ; i++){
                if(nums[i] == res2) count++;
            }
            if(count > len / 3) ans.push_back(res2);
        }
     
        return ans;
    }
};
