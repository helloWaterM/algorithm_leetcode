给定一个字符串数组 words，找到 length(word[i]) * length(word[j]) 的最大值，并且这两个单词不含有公共字母。你可以认为每个单词只包含小写字母。如果不存在这样的两个单词，返回 0。

示例 1:

输入: ["abcw","baz","foo","bar","xtfn","abcdef"]
输出: 16 
解释: 这两个单词为 "abcw", "xtfn"。
示例 2:

输入: ["a","ab","abc","d","cd","bcd","abcd"]
输出: 4 
解释: 这两个单词为 "ab", "cd"。
示例 3:

输入: ["a","aa","aaa","aaaa"]
输出: 0 
解释: 不存在这样的两个单词。


class Solution {
public:
    int maxProduct(vector<string>& words) {
        int len = words.size();
        vector<int> hashW(len, 0);
 
        for(int i = 0; i < len; i++){
            for(int j = 0; j < words[i].size(); j++){
                hashM[i] |= (1 << (words[i][j] - 'a'));
            }
        }
        int ans = 0;
        for(int i = 0; i < len; i++){
            for(int j = i + 1; j < len; j++){
                if((hashM[i] & hashM[j]) == 0){
                    int newAns = words[i].size() * words[j].size();
                    ans = max(ans, newAns);
                }
            }
        }
        return ans;
    }
};


解析：
  这道题的解题技巧在于字符串两两比较的时候，使用了一个数字来表示两个字符串。而这个数字中的每一位代表了对应的字符串是否包含了a-z的对应字符。
