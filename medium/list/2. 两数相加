给定两个非空链表来表示两个非负整数。位数按照逆序方式存储，它们的每个节点只存储单个数字。将两数相加返回一个新的链表。

你可以假设除了数字 0 之外，这两个数字都不会以零开头。

示例：

输入：(2 -> 4 -> 3) + (5 -> 6 -> 4)
输出：7 -> 0 -> 8
原因：342 + 465 = 807


/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode *ans; ans = new ListNode(0);
        ListNode *tail; tail = ans;
        ListNode *n1 = l1; ListNode *n2 = l2;
        int last = 0;
        while(n1 != NULL && n2 != NULL ){
            int num1 = n1 -> val;
            int num2 = n2 -> val;
            ListNode *addNode = new ListNode((num1 + num2 + last) % 10);
            tail -> next = addNode;
            tail = addNode;
            last = (num1 + num2 + last) / 10;
            n1 = n1->next; n2 = n2->next;
        }   
        while(n1 != NULL){
            int num1 = n1 -> val;
            ListNode *addNode = new ListNode((num1 + last) % 10);
            tail -> next = addNode;
            tail = addNode;
            last = (num1 + last) / 10;
            n1 = n1->next;
        }
        while(n2 != NULL){
            int num2 = n2 -> val;
            ListNode *addNode = new ListNode((num2 + last) % 10);
            tail -> next = addNode;
            tail = addNode;
            last = (num2 + last) / 10;
            n2 = n2->next;
        }
        if(last == 1){
            ListNode *addNode = new ListNode(last);
            tail -> next = addNode;
            tail = addNode;
            last = 0;
        }
        tail -> next = NULL;
        return ans->next;
    }
};
